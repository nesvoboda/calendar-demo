import createClient from "openapi-fetch";
import type { paths } from "../types/api"; // generated by openapi-typescript
import { useMutation, useQuery } from "@tanstack/react-query";

const client = createClient<paths>({ baseUrl: "http://localhost:3000" });

export type Meeting =
  paths["/meetings/"]["get"]["responses"]["200"]["content"]["application/json"]["meetings"][number];

export type MeetingCreate =
  paths["/meetings/"]["post"]["requestBody"]["content"]["application/json"];

const useMeetings = () => {
  return useQuery({
    queryKey: ["meetings"],
    queryFn: async () => {
      const { data, error } = await client.GET("/meetings/", {
        headers: {
          "Content-Type": "application/json",
        },
      });
      if (error) {
        throw error;
      }
      return data.meetings;
    },
  });
};

const useCreateMeeting = () => {
  return useMutation({
    mutationFn: async (meeting: MeetingCreate) => {
      const { data, error } = await client.POST("/meetings/", {
        body: meeting,
      });
      if (error) {
        throw error;
      }
      return data;
    },
  });
};
